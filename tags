!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CSP	csp++-def.h	/^	CSP ( int n, T default_value, bool set_variables = false, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint );$/;"	p	class:CSP	access:public	signature:( int n, T default_value, bool set_variables = false, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint )
CSP	csp++-def.h	/^	CSP ( int n, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint );$/;"	p	class:CSP	access:public	signature:( int n, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint )
CSP	csp++-def.h	/^	CSP()  {}$/;"	f	class:CSP	access:public	signature:()
CSP	csp++-def.h	/^class CSP  {$/;"	c
CSP	csp++.cpp	/^CSP<T>::CSP ( int n, T default_value, bool set_value, bool (*c)(std::vector< CSPvariable<T> >) )$/;"	f	class:CSP	signature:( int n, T default_value, bool set_value, bool (*c)(std::vector< CSPvariable<T> >) )
CSP	csp++.cpp	/^CSP<T>::CSP (int n, bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:(int n, bool (*c)(vector< CSPvariable<T> >))
CSP::CSP	csp++-def.h	/^	CSP ( int n, T default_value, bool set_variables = false, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint );$/;"	p	class:CSP	access:public	signature:( int n, T default_value, bool set_variables = false, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint )
CSP::CSP	csp++-def.h	/^	CSP ( int n, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint );$/;"	p	class:CSP	access:public	signature:( int n, bool (*c)(std::vector< CSPvariable<T> >) = __default_constraint )
CSP::CSP	csp++-def.h	/^	CSP()  {}$/;"	f	class:CSP	access:public	signature:()
CSP::CSP	csp++.cpp	/^CSP<T>::CSP ( int n, T default_value, bool set_value, bool (*c)(std::vector< CSPvariable<T> >) )$/;"	f	class:CSP	signature:( int n, T default_value, bool set_value, bool (*c)(std::vector< CSPvariable<T> >) )
CSP::CSP	csp++.cpp	/^CSP<T>::CSP (int n, bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:(int n, bool (*c)(vector< CSPvariable<T> >))
CSP::__default_constraint	csp++-def.h	/^	static bool __default_constraint ( std::vector< CSPvariable<T> > v )  { return true; }$/;"	f	class:CSP	access:private	signature:( std::vector< CSPvariable<T> > v )
CSP::__default_domains	csp++-def.h	/^	std::vector< std::vector<T> > __default_domains;$/;"	m	class:CSP	access:private
CSP::__default_value	csp++-def.h	/^	T __default_value;$/;"	m	class:CSP	access:private
CSP::__has_default_value	csp++-def.h	/^	bool __has_default_value;$/;"	m	class:CSP	access:private
CSP::__init	csp++-def.h	/^	void __init ( int n, bool (*c)(std::vector< CSPvariable<T> >) );$/;"	p	class:CSP	access:private	signature:( int n, bool (*c)(std::vector< CSPvariable<T> >) )
CSP::__init	csp++.cpp	/^CSP<T>::__init (int n, bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:(int n, bool (*c)(vector< CSPvariable<T> >))
CSP::appendConstraint	csp++-def.h	/^	void appendConstraint ( bool (*c)(std::vector< CSPvariable<T> >) );$/;"	p	class:CSP	access:public	signature:( bool (c)std::vector< CSPvariable<T> >) )
CSP::appendConstraint	csp++.cpp	/^CSP<T>::appendConstraint ( bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:( bool (c)vector< CSPvariable<T> >))
CSP::arc	csp++-def.h	/^	struct arc  {$/;"	s	class:CSP	access:private
CSP::arc::value	csp++-def.h	/^		TT value[2];$/;"	m	struct:CSP::arc	access:public
CSP::arc::var	csp++-def.h	/^		CSPvariable<TT> var[2];$/;"	m	struct:CSP::arc	access:public
CSP::assignUniqueDomains	csp++-def.h	/^	void assignUniqueDomains ( void );$/;"	p	class:CSP	access:public	signature:( void )
CSP::assignUniqueDomains	csp++.cpp	/^CSP<T>::assignUniqueDomains ( void )$/;"	f	class:CSP	signature:( void )
CSP::constraints	csp++-def.h	/^	std::vector< bool (*)(std::vector< CSPvariable<T> >) > constraints;$/;"	m	class:CSP	access:private
CSP::dropConstraint	csp++-def.h	/^	void dropConstraint ( size_t index );$/;"	p	class:CSP	access:public	signature:( size_t index )
CSP::dropConstraint	csp++.cpp	/^CSP<T>::dropConstraint ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
CSP::getDomain	csp++-def.h	/^	std::vector<T> getDomain ( size_t index );$/;"	p	class:CSP	access:public	signature:( size_t index )
CSP::getDomain	csp++.cpp	/^CSP<T>::getDomain ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
CSP::getSize	csp++-def.h	/^	size_t getSize ( void );$/;"	p	class:CSP	access:public	signature:( void )
CSP::getSize	csp++.cpp	/^CSP<T>::getSize( void )$/;"	f	class:CSP	signature:( void )
CSP::getSolution	csp++-def.h	/^	void getSolution ( size_t maxIterations = 0 );$/;"	p	class:CSP	access:public	signature:( size_t maxIterations = 0 )
CSP::getSolution	csp++.cpp	/^CSP<T>::getSolution ( size_t max_iterations )$/;"	f	class:CSP	signature:( size_t max_iterations )
CSP::hasUniqueSolution	csp++-def.h	/^	bool hasUniqueSolution ( void );$/;"	p	class:CSP	access:public	signature:( void )
CSP::hasUniqueSolution	csp++.cpp	/^CSP<T>::hasUniqueSolution ( void )$/;"	f	class:CSP	signature:( void )
CSP::isSatisfiable	csp++-def.h	/^	bool isSatisfiable ( void );$/;"	p	class:CSP	access:public	signature:( void )
CSP::isSatisfiable	csp++.cpp	/^CSP<T>::isSatisfiable ( void )$/;"	f	class:CSP	signature:( void )
CSP::isSet	csp++-def.h	/^	bool isSet ( size_t i );$/;"	p	class:CSP	access:public	signature:( size_t i )
CSP::isSet	csp++.cpp	/^CSP<T>::isSet ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
CSP::refreshDomains	csp++-def.h	/^	void refreshDomains ( void );$/;"	p	class:CSP	access:public	signature:( void )
CSP::refreshDomains	csp++.cpp	/^CSP<T>::refreshDomains ( void )$/;"	f	class:CSP	signature:( void )
CSP::restoreDomains	csp++-def.h	/^	void restoreDomains ( void );$/;"	p	class:CSP	access:private	signature:( void )
CSP::restoreDomains	csp++.cpp	/^CSP<T>::restoreDomains ( void )$/;"	f	class:CSP	signature:( void )
CSP::setConstraint	csp++-def.h	/^	void setConstraint ( bool (*c)(std::vector< CSPvariable<T> >) );$/;"	p	class:CSP	access:public	signature:( bool (c)std::vector< CSPvariable<T> >) )
CSP::setConstraint	csp++-def.h	/^	void setConstraint ( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c );$/;"	p	class:CSP	access:public	signature:( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c )
CSP::setConstraint	csp++.cpp	/^CSP<T>::setConstraint ( bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:( bool (c)vector< CSPvariable<T> >))
CSP::setConstraint	csp++.cpp	/^CSP<T>::setConstraint ( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c )$/;"	f	class:CSP	signature:( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c )
CSP::setDomain	csp++-def.h	/^	void setDomain ( size_t index, T domain[], int size );$/;"	p	class:CSP	access:public	signature:( size_t index, T domain[], int size )
CSP::setDomain	csp++-def.h	/^	void setDomain ( size_t index, std::vector<T> domain );$/;"	p	class:CSP	access:public	signature:( size_t index, std::vector<T> domain )
CSP::setDomain	csp++.cpp	/^CSP<T>::setDomain (size_t index, T domain[], int size)$/;"	f	class:CSP	signature:(size_t index, T domain[], int size)
CSP::setDomain	csp++.cpp	/^CSP<T>::setDomain (size_t index, vector<T> domain)$/;"	f	class:CSP	signature:(size_t index, vector<T> domain)
CSP::setValue	csp++-def.h	/^	void setValue ( size_t index, T value );$/;"	p	class:CSP	access:public	signature:( size_t index, T value )
CSP::setValue	csp++.cpp	/^CSP<T>::setValue ( size_t index, T value )$/;"	f	class:CSP	signature:( size_t index, T value )
CSP::unsetValue	csp++-def.h	/^	void unsetValue ( size_t index );$/;"	p	class:CSP	access:public	signature:( size_t index )
CSP::unsetValue	csp++.cpp	/^CSP<T>::unsetValue ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
CSP::value	csp++-def.h	/^	T value ( size_t i );$/;"	p	class:CSP	access:public	signature:( size_t i )
CSP::value	csp++.cpp	/^CSP<T>::value ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
CSP::variables	csp++-def.h	/^	std::vector< CSPvariable<T> > variables;$/;"	m	class:CSP	access:private
CSPexception	csp++-def.h	/^	CSPexception (const char *m)  {$/;"	f	class:CSPexception	access:public	signature:(const char *m)
CSPexception	csp++-def.h	/^class CSPexception : public std::exception  {$/;"	c	inherits:std::exception
CSPexception::CSPexception	csp++-def.h	/^	CSPexception (const char *m)  {$/;"	f	class:CSPexception	access:public	signature:(const char *m)
CSPexception::message	csp++-def.h	/^	const char* message;$/;"	m	class:CSPexception	access:private
CSPexception::what	csp++-def.h	/^	virtual const char* what()  {$/;"	f	class:CSPexception	access:public	signature:()
CSPvariable	csp++-def.h	/^struct CSPvariable  {$/;"	s
CSPvariable::domain	csp++-def.h	/^	std::vector<T> domain;$/;"	m	struct:CSPvariable	access:public
CSPvariable::fixed	csp++-def.h	/^	bool fixed;$/;"	m	struct:CSPvariable	access:public
CSPvariable::index	csp++-def.h	/^	int index;$/;"	m	struct:CSPvariable	access:public
CSPvariable::value	csp++-def.h	/^	T value;$/;"	m	struct:CSPvariable	access:public
__CSPPP_CPP	csp++.cpp	23;"	d	file:
__CSPPP_CPP	csp++.cpp	25;"	d	file:
__CSPPP_H	csp++-def.h	22;"	d
__CSPPP_VERSION	csp++-def.h	28;"	d
__default_constraint	csp++-def.h	/^	static bool __default_constraint ( std::vector< CSPvariable<T> > v )  { return true; }$/;"	f	class:CSP	access:private	signature:( std::vector< CSPvariable<T> > v )
__default_domains	csp++-def.h	/^	std::vector< std::vector<T> > __default_domains;$/;"	m	class:CSP	access:private
__default_value	csp++-def.h	/^	T __default_value;$/;"	m	class:CSP	access:private
__has_default_value	csp++-def.h	/^	bool __has_default_value;$/;"	m	class:CSP	access:private
__init	csp++-def.h	/^	void __init ( int n, bool (*c)(std::vector< CSPvariable<T> >) );$/;"	p	class:CSP	access:private	signature:( int n, bool (*c)(std::vector< CSPvariable<T> >) )
__init	csp++.cpp	/^CSP<T>::__init (int n, bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:(int n, bool (*c)(vector< CSPvariable<T> >))
appendConstraint	csp++-def.h	/^	void appendConstraint ( bool (*c)(std::vector< CSPvariable<T> >) );$/;"	p	class:CSP	access:public	signature:( bool (c)std::vector< CSPvariable<T> >) )
appendConstraint	csp++.cpp	/^CSP<T>::appendConstraint ( bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:( bool (c)vector< CSPvariable<T> >))
arc	csp++-def.h	/^	struct arc  {$/;"	s	class:CSP	access:private
assignUniqueDomains	csp++-def.h	/^	void assignUniqueDomains ( void );$/;"	p	class:CSP	access:public	signature:( void )
assignUniqueDomains	csp++.cpp	/^CSP<T>::assignUniqueDomains ( void )$/;"	f	class:CSP	signature:( void )
constraint	csp++-def.h	91;"	d
constraints	csp++-def.h	/^	std::vector< bool (*)(std::vector< CSPvariable<T> >) > constraints;$/;"	m	class:CSP	access:private
domain	csp++-def.h	/^	std::vector<T> domain;$/;"	m	struct:CSPvariable	access:public
dropConstraint	csp++-def.h	/^	void dropConstraint ( size_t index );$/;"	p	class:CSP	access:public	signature:( size_t index )
dropConstraint	csp++.cpp	/^CSP<T>::dropConstraint ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
fixed	csp++-def.h	/^	bool fixed;$/;"	m	struct:CSPvariable	access:public
getDomain	csp++-def.h	/^	std::vector<T> getDomain ( size_t index );$/;"	p	class:CSP	access:public	signature:( size_t index )
getDomain	csp++.cpp	/^CSP<T>::getDomain ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
getSize	csp++-def.h	/^	size_t getSize ( void );$/;"	p	class:CSP	access:public	signature:( void )
getSize	csp++.cpp	/^CSP<T>::getSize( void )$/;"	f	class:CSP	signature:( void )
getSolution	csp++-def.h	/^	void getSolution ( size_t maxIterations = 0 );$/;"	p	class:CSP	access:public	signature:( size_t maxIterations = 0 )
getSolution	csp++.cpp	/^CSP<T>::getSolution ( size_t max_iterations )$/;"	f	class:CSP	signature:( size_t max_iterations )
hasUniqueSolution	csp++-def.h	/^	bool hasUniqueSolution ( void );$/;"	p	class:CSP	access:public	signature:( void )
hasUniqueSolution	csp++.cpp	/^CSP<T>::hasUniqueSolution ( void )$/;"	f	class:CSP	signature:( void )
index	csp++-def.h	/^	int index;$/;"	m	struct:CSPvariable	access:public
isSatisfiable	csp++-def.h	/^	bool isSatisfiable ( void );$/;"	p	class:CSP	access:public	signature:( void )
isSatisfiable	csp++.cpp	/^CSP<T>::isSatisfiable ( void )$/;"	f	class:CSP	signature:( void )
isSet	csp++-def.h	/^	bool isSet ( size_t i );$/;"	p	class:CSP	access:public	signature:( size_t i )
isSet	csp++.cpp	/^CSP<T>::isSet ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
message	csp++-def.h	/^	const char* message;$/;"	m	class:CSPexception	access:private
refreshDomains	csp++-def.h	/^	void refreshDomains ( void );$/;"	p	class:CSP	access:public	signature:( void )
refreshDomains	csp++.cpp	/^CSP<T>::refreshDomains ( void )$/;"	f	class:CSP	signature:( void )
restoreDomains	csp++-def.h	/^	void restoreDomains ( void );$/;"	p	class:CSP	access:private	signature:( void )
restoreDomains	csp++.cpp	/^CSP<T>::restoreDomains ( void )$/;"	f	class:CSP	signature:( void )
setConstraint	csp++-def.h	/^	void setConstraint ( bool (*c)(std::vector< CSPvariable<T> >) );$/;"	p	class:CSP	access:public	signature:( bool (c)std::vector< CSPvariable<T> >) )
setConstraint	csp++-def.h	/^	void setConstraint ( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c );$/;"	p	class:CSP	access:public	signature:( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c )
setConstraint	csp++.cpp	/^CSP<T>::setConstraint ( bool (*c)(vector< CSPvariable<T> >))$/;"	f	class:CSP	signature:( bool (c)vector< CSPvariable<T> >))
setConstraint	csp++.cpp	/^CSP<T>::setConstraint ( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c )$/;"	f	class:CSP	signature:( std::vector< bool(*)(std::vector< CSPvariable<T> >) > c )
setDomain	csp++-def.h	/^	void setDomain ( size_t index, T domain[], int size );$/;"	p	class:CSP	access:public	signature:( size_t index, T domain[], int size )
setDomain	csp++-def.h	/^	void setDomain ( size_t index, std::vector<T> domain );$/;"	p	class:CSP	access:public	signature:( size_t index, std::vector<T> domain )
setDomain	csp++.cpp	/^CSP<T>::setDomain (size_t index, T domain[], int size)$/;"	f	class:CSP	signature:(size_t index, T domain[], int size)
setDomain	csp++.cpp	/^CSP<T>::setDomain (size_t index, vector<T> domain)$/;"	f	class:CSP	signature:(size_t index, vector<T> domain)
setValue	csp++-def.h	/^	void setValue ( size_t index, T value );$/;"	p	class:CSP	access:public	signature:( size_t index, T value )
setValue	csp++.cpp	/^CSP<T>::setValue ( size_t index, T value )$/;"	f	class:CSP	signature:( size_t index, T value )
unsetValue	csp++-def.h	/^	void unsetValue ( size_t index );$/;"	p	class:CSP	access:public	signature:( size_t index )
unsetValue	csp++.cpp	/^CSP<T>::unsetValue ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
value	csp++-def.h	/^		TT value[2];$/;"	m	struct:CSP::arc	access:public
value	csp++-def.h	/^	T value ( size_t i );$/;"	p	class:CSP	access:public	signature:( size_t i )
value	csp++-def.h	/^	T value;$/;"	m	struct:CSPvariable	access:public
value	csp++.cpp	/^CSP<T>::value ( size_t index )$/;"	f	class:CSP	signature:( size_t index )
var	csp++-def.h	/^		CSPvariable<TT> var[2];$/;"	m	struct:CSP::arc	access:public
variables	csp++-def.h	/^	std::vector< CSPvariable<T> > variables;$/;"	m	class:CSP	access:private
what	csp++-def.h	/^	virtual const char* what()  {$/;"	f	class:CSPexception	access:public	signature:()
